---


- name: Check for the presence of /home/{{ os_user }}/{{ splunk_tgz }}
  stat: 
    path: /home/{{ os_user }}/{{ splunk_tgz }}
    get_checksum: yes  
    checksum_algorithm: md5
  register: splunk_tgz_downloaded_flag
  become: yes

#- name: -TGZ- Download (wget) {{ splunk_tgz }}
#  get_url:
#    url: https://www.splunk.com/bin/splunk/DownloadActivityServlet?architecture=x86_64&platform=linux&version={{ splunk_version }}&product=splunk&filename={{ splunk_tgz }}&wget=true
#    checksum: "md5:{{ splunk_tgz_checksum }}"
#    dest: /home/{{ os_user }}
#    mode: '0640'  
#    owner: "{{ os_user }}"
#    group: "{{ os_group }}"
#    timeout: 20
#  become: yes
#  when: splunk_tgz_downloaded_flag.stat.exists == False and download_tgz_from_splunk_servers 

- name: Uploading ./files/{{ splunk_tgz }} (local) to /home/{{ os_user }}/ (remote)
  copy:
    src: "files/{{ splunk_tgz }}"
    dest: /home/{{ os_user }}
    mode: '0640'
    owner: "{{ os_user }}"
    group: "{{ os_group }}"
  become: yes
  when: splunk_tgz_downloaded_flag.stat.exists == False and not download_tgz_from_splunk_servers 

- name: Check for the presence of /opt/splunk/bin
  stat: 
    path: /opt/splunk/bin
  register: splunk_dir
  become: yes
- debug:
    msg: "Path exists: {{ splunk_dir.stat.exists }}"

- name: Extracting {{ splunk_tgz }} to {{ splunk_home }} to install
  unarchive:
    src: /home/{{ os_user }}/{{ splunk_tgz }}
    dest: "{{ splunk_home }}/.."
    remote_src: yes
    owner: "{{ os_user }}"
    group: "{{ os_group }}"
  become: yes
  when: splunk_dir.stat.exists == False
